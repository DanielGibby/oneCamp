<?php

/**
 * @file
 * Contains scouts_custom.module
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpKernel\KernelEvents;

/**
 * Implements hook_help().
 */
function scouts_custom_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    case 'help.page.scouts_custom':
      return t('
        <h2>Help page for the Scouts Custom module</h2>
        <h3>Instructions</h3>
      ');
  }
}

function scouts_custom_get_current_user()
{
  $current_user = \Drupal::currentUser();
  $roles = $current_user->getRoles();
}

/**
 * Implements preprocess_page_title().
 */
function scouts_custom_preprocess_page_title(&$variables)
{
  // Only process this if we are on a users page.
  /*
  if (\Drupal::routeMatch()->getParameter('user')) {
    $user_page = \Drupal::routeMatch()->getParameter('user');
    $first_name = $user_page->get('field_first_name')->getValue()[0]['value'];
    $last_name = $user_page->get('field_last_name')->getValue()[0]['value'];
    $variables['title'] = $first_name . ' ' . $last_name;
  }
  */
}

/**
 * Implements hook_mail_alter().
 */
function scouts_custom_mail_alter(&$message)
{
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
}

/**
 * Implements hook_mail().
 */
function scouts_custom_mail($key, &$message, $params)
{
  $options = array(
    'langcode' => $message['langcode'],
  );
  switch ($key) {
    case 'maintenance_job_created':
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@subject', ['@subject' => $params['subject']], $options);
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Implements hook_entity_presave().
 */
function scouts_custom_entity_presave(Drupal\Core\Entity\EntityInterface $entity)
{
  switch ($entity->bundle()) {
    case 'maintenance_request':
      //dump($entity->title->value);
      //dump($entity->field_status->value);

      //dump('whats being saved');
      //dump($entity->field_status->value);

      //dump('original data');
      //dump($entity->original->field_status->value);
      //exit();
      break;
  }
}

/**
 * Implements hook_entity_insert().
 */
function scouts_custom_entity_insert(Drupal\Core\Entity\EntityInterface $entity)
{

  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'maintenance_request') {

    // Run this code when a new Maintenance Request is logged.
    // We need to see if the job has been logged (which can only be done by admin at creation time)
    // If so, then we need to email the person its logged to directly to let them know that they have been assigned the job.

    dump($entity->field_assigned_to->value);

    $send_email = false;

    if ($entity->field_assigned_to->value == NULL) {
      // This means we are saving the form but not assigning it to anyone.
      // So the job needs to go to the admin staff to let them know.

      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($entity->field_severity->target_id);

      // The priority will determin who this request is relayed to.
      switch ($term->name->value) {
        case 'maintenance_request':
          //dump($entity->title->value);
          //dump($entity->field_status->value);

          //dump('whats being saved');
          //dump($entity->field_status->value);

          //dump('original data');
          //dump($entity->original->field_status->value);
          //exit();
          break;
      }

      dump($entity->field_status->value);
      dump($entity->field_severity->value);
      dump($entity->field_severity->target_id);

      // Need to see who the email needs to be sent to.
      // i.e. if there is a "head of maintenance person" or all users that are admin
      $to = 'dan.gibby@gmail.com';
      $params['subject'] = "New Maintenance Issue logged: " . $entity->label();
      $params['message'] = '<html><body>A new job has been logged which needs to be assigned to someone.</body></html>';

      $send_email = true;
    }

    exit();

    if ($send_email) {
      $mailManager = \Drupal::service('plugin.manager.mail');
      $module = 'scouts_custom';
      $key = 'maintenance_job_created';
      $params['node_title'] = $entity->label();
      $langcode = \Drupal::currentUser()->getPreferredLangcode();
      $send = true;

      $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);

      if ($result['result'] !== true) {
        // \Drupal::messenger()->addError(t('There was a problem sending your message and it was not sent.'));
      } else {
        \Drupal::messenger()->addStatus(t('Your message has been sent.'));
      }
    }
  }
}


/**
 * Implements preprocess_node().
 */
function scouts_custom_preprocess_node(&$variables)
{
  //dump(\Drupal::routeMatch());

  /*
  $show_event_register_option = false;

  if (\Drupal::routeMatch()->getParameter('node')) {
    if ($variables['node']->bundle() == 'event') {
      // only do this on an actual event page.
      $show_event_register_option = true;
      $node = $variables['node'];

      $waitlist = false;

      $who_is_waiting = $node->get('field_waitlist')->getValue();
      $user = \Drupal::currentUser()->id();
      foreach ($who_is_waiting as $check) {
        if ($check['target_id'] == $user) {
          $waitlist = true;
        }
      }

      $accepted_role = false;
      $current_roles = \Drupal::currentUser()->getRoles();
      foreach (\Drupal::currentUser()->getRoles() as $role_check) {
        if (strtolower($role_check) == 'youth_member') {
          $accepted_role = true;
        }
      }

      $section_check = false;
      $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
      //dump($node->get('field_who_can_attend')->getValue());
      //dump($user->get('field_section')->getValue());
      if ($user->get('field_section')->getValue()) {
        foreach ($node->get('field_who_can_attend')->getValue() as $section) {
          if ($section['target_id'] == $user->get('field_section')->getValue()[0]['target_id']) {
            $section_check = true;
          }
        }
      }

      $content_array = [
        'is_on_wait_list' => $waitlist,
        'who_is_waiting' => $who_is_waiting,
        'user' => $user,
        'current_roles' => $current_roles,
        'accepted_role' => $accepted_role,
        'section_check' => $section_check,
        'show_event_register_option' => $show_event_register_option,
      ];

      $variables['render_content'] = $content_array;

      //dump($variables['render_content']);
    }

  }
  $variables['show_event_register_option'] = $show_event_register_option;
  */
}

/**
 * Helper function for homepage preprocess page function.
 */

function scouts_custom_preprocess_page_button_check($settings)
{
  $options = [];
  // Set a config handler.
  $config = \Drupal::config($settings);
  // Only add it to the array if its set to show on the homepage
  if ($config->get('show_on_homepage')) {
    // Also, we need to check to make sure the current user has the permission to access this module

    // Get the list of accepted users
    $accepted_users = [];
    foreach ($config->get('user_access_by_role') as $role => $value) {
      if ($value) {
        $accepted_users[] = $value;
      }
    }

    $current_user = \Drupal::currentUser();
    $roles = $current_user->getRoles();

    $is_an_acceptable_role = false;
    foreach ($roles as $role) {
      if (in_array($role, $accepted_users)) {
        $is_an_acceptable_role = TRUE;
      }
    }

    if ($is_an_acceptable_role) {
      $options = [
        'title' => $config->get('homepage_title'),
        'link' => $config->get('homepage_link_path'),
        'icon' => $config->get('homepage_icon'),
      ];

      return $options;
    } else {
      return false;
    }
  }
}

/**
 * Implements preprocess_page().
 */
function scouts_custom_preprocess_page(&$variables)
{
  // Only process this section if we are on the front page.
  if ($variables['is_front']) {

    // Set an array to hold the button details
    $homepage_icons = [];

    // Set a handler for the module handle servvice
    $moduleHandler = \Drupal::service('module_handler');

    // Now we need to check for modules which have been enabled to decide if they need to have an icon on the homepage.
    if ($moduleHandler->moduleExists('scouts_maintenance')) {
      $homepage_icons[] = scouts_custom_preprocess_page_button_check('scouts_custom.scouts_maintenance');
    }
    if ($moduleHandler->moduleExists('catering')) {
      $homepage_icons[] = scouts_custom_preprocess_page_button_check('scouts_custom.catering');
    }

    // Throw the variables to TWIG.
    $variables['homepage_icons'] = $homepage_icons;
  }

  // Only process this if we are on a users page.
  /*
  if (\Drupal::routeMatch()->getParameter('user')) {
    $user_page = \Drupal::routeMatch()->getParameter('user');

    //dump($user_page->get('field_qr_code')->getValue());
    $dob = explode('-', $user_page->get('field_date_of_birth')->getValue()[0]['value']);

    $user_details = [
      'first_name' => $user_page->get('field_first_name')->getValue()[0]['value'],
      'last_name' => $user_page->get('field_last_name')->getValue()[0]['value'],
      'member_number' => $user_page->get('field_membership_number')->getValue()[0]['value'],
      'dob' => $dob[2] . '/' . $dob[1] . '/' . $dob[0],
    ];

    //dump($user_details['dob']);
    $variables['user_details'] = $user_details;
  }
  */
}
